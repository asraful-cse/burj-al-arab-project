{"ast":null,"code":"import _slicedToArray from\"C:/Users/Sunny Ahamed Asraf/Desktop/core-react-project/burj-al-arab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext}from'react';import firebase from\"firebase/app\";import\"firebase/auth\";import firebaseConfig from'./firebase.config';import{UserContext}from'../../App';import{useHistory,useLocation}from'react-router';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Login=function Login(){var _useContext=useContext(UserContext),_useContext2=_slicedToArray(_useContext,2),loggedInUser=_useContext2[0],setLoggedInUser=_useContext2[1];//// LoginPage\nvar history=useHistory();var location=useLocation();var _ref=location.state||{from:{pathname:\"/\"}},from=_ref.from;if(firebase.apps.length===0){firebase.initializeApp(firebaseConfig);}var handleGoogleSignIn=function handleGoogleSignIn(){var provider=new firebase.auth.GoogleAuthProvider();firebase.auth().signInWithPopup(provider).then(function(result){var _result$user=result.user,displayName=_result$user.displayName,email=_result$user.email;var signedInUser={name:displayName,email:email};setLoggedInUser(signedInUser);history.replace(from);}).catch(function(error){// Handle Errors here.\nvar errorCode=error.code;var errorMessage=error.message;// The email of the user's account used.\nvar email=error.email;// The firebase.auth.AuthCredential type that was used.\nvar credential=error.credential;// ...\n});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"This is Login\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGoogleSignIn,children:\"Google Sign in\"})]});};export default Login;","map":{"version":3,"sources":["C:/Users/Sunny Ahamed Asraf/Desktop/core-react-project/burj-al-arab/src/components/Login/Login.js"],"names":["React","useContext","firebase","firebaseConfig","UserContext","useHistory","useLocation","Login","loggedInUser","setLoggedInUser","history","location","state","from","pathname","apps","length","initializeApp","handleGoogleSignIn","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","user","displayName","email","signedInUser","name","replace","catch","error","errorCode","code","errorMessage","message","credential"],"mappings":"0LAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAO,eAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,mBAA3B,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,OAASC,UAAT,CAAqBC,WAArB,KAAwC,cAAxC,C,wFAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAChB,gBAAuCN,UAAU,CAACG,WAAD,CAAjD,4CAAOI,YAAP,iBAAqBC,eAArB,iBACA;AACA,GAAMC,CAAAA,OAAO,CAAGL,UAAU,EAA1B,CACA,GAAMM,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CACD,SAAgBK,QAAQ,CAACC,KAAT,EAAkB,CAAEC,IAAI,CAAE,CAAEC,QAAQ,CAAE,GAAZ,CAAR,CAAlC,CAAOD,IAAP,MAAOA,IAAP,CAEC,GAAIX,QAAQ,CAACa,IAAT,CAAcC,MAAd,GAAyB,CAA7B,CAAgC,CAC5Bd,QAAQ,CAACe,aAAT,CAAuBd,cAAvB,EACH,CAED,GAAMe,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7B,GAAIC,CAAAA,QAAQ,CAAG,GAAIjB,CAAAA,QAAQ,CAACkB,IAAT,CAAcC,kBAAlB,EAAf,CAEAnB,QAAQ,CAACkB,IAAT,GACKE,eADL,CACqBH,QADrB,EAC+BI,IAD/B,CACoC,SAACC,MAAD,CAAY,CACxC,iBAA+BA,MAAM,CAACC,IAAtC,CAAQC,WAAR,cAAQA,WAAR,CAAqBC,KAArB,cAAqBA,KAArB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAAEC,IAAI,CAAEH,WAAR,CAAqBC,KAAK,CAALA,KAArB,CAArB,CACAlB,eAAe,CAACmB,YAAD,CAAf,CACAlB,OAAO,CAACoB,OAAR,CAAgBjB,IAAhB,EAEH,CAPL,EAOOkB,KAPP,CAOa,SAACC,KAAD,CAAW,CAChB;AACA,GAAIC,CAAAA,SAAS,CAAGD,KAAK,CAACE,IAAtB,CACA,GAAIC,CAAAA,YAAY,CAAGH,KAAK,CAACI,OAAzB,CACA;AACA,GAAIT,CAAAA,KAAK,CAAGK,KAAK,CAACL,KAAlB,CACA;AACA,GAAIU,CAAAA,UAAU,CAAGL,KAAK,CAACK,UAAvB,CACA;AACH,CAhBL,EAiBH,CApBD,CAqBA,mBACI,oCACI,qCADJ,cAEI,eAAQ,OAAO,CAAEnB,kBAAjB,4BAFJ,GADJ,CAMH,CAtCD,CAwCA,cAAeX,CAAAA,KAAf","sourcesContent":["import React, { useContext } from 'react';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from './firebase.config';\nimport { UserContext } from '../../App';\nimport { useHistory, useLocation } from 'react-router';\n\nconst Login = () => {\n    const [loggedInUser, setLoggedInUser] =useContext(UserContext);\n    //// LoginPage\n    const history = useHistory();\n    const location = useLocation();\n   const{ from } = location.state || { from: { pathname: \"/\" } };\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n    }\n\n    const handleGoogleSignIn = () => {\n        var provider = new firebase.auth.GoogleAuthProvider();\n\n        firebase.auth()\n            .signInWithPopup(provider).then((result) => {\n                const { displayName, email } = result.user;\n                const signedInUser = { name: displayName, email }\n                setLoggedInUser(signedInUser);\n                history.replace(from);\n\n            }).catch((error) => {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                // The email of the user's account used.\n                var email = error.email;\n                // The firebase.auth.AuthCredential type that was used.\n                var credential = error.credential;\n                // ...\n            });\n    }\n    return (\n        <div>\n            <h1>This is Login</h1>\n            <button onClick={handleGoogleSignIn}>Google Sign in</button>\n        </div>\n    );\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}